//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_PlatformManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.PlatformManager), typeof(LuaFramework.Manager));
		L.RegFunction("getPlatfromType", getPlatfromType);
		L.RegFunction("callNative", callNative);
		L.RegFunction("callNativeReturnInt", callNativeReturnInt);
		L.RegFunction("callNativeReturnString", callNativeReturnString);
		L.RegFunction("callEngine", callEngine);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPlatfromType(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.PlatformManager obj = (LuaFramework.PlatformManager)ToLua.CheckObject<LuaFramework.PlatformManager>(L, 1);
			int o = obj.getPlatfromType();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int callNative(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFramework.PlatformManager obj = (LuaFramework.PlatformManager)ToLua.CheckObject<LuaFramework.PlatformManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			obj.callNative(arg0, arg1, arg2);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int callNativeReturnInt(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFramework.PlatformManager obj = (LuaFramework.PlatformManager)ToLua.CheckObject<LuaFramework.PlatformManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			int o = obj.callNativeReturnInt(arg0, arg1, arg2);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int callNativeReturnString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);
			LuaFramework.PlatformManager obj = (LuaFramework.PlatformManager)ToLua.CheckObject<LuaFramework.PlatformManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			object[] arg2 = ToLua.ToParamsObject(L, 4, count - 3);
			string o = obj.callNativeReturnString(arg0, arg1, arg2);
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int callEngine(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.PlatformManager obj = (LuaFramework.PlatformManager)ToLua.CheckObject<LuaFramework.PlatformManager>(L, 1);
			string arg0 = ToLua.CheckString(L, 2);
			obj.callEngine(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

