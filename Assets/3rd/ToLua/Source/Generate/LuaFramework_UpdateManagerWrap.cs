//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class LuaFramework_UpdateManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(LuaFramework.UpdateManager), typeof(LuaFramework.Manager));
		L.RegFunction("Init", Init);
		L.RegFunction("getPackageVersion", getPackageVersion);
		L.RegFunction("getLocalVersion", getLocalVersion);
		L.RegFunction("getLuaRoot", getLuaRoot);
		L.RegFunction("checkExtactResource", checkExtactResource);
		L.RegFunction("InstallUpdateZip", InstallUpdateZip);
		L.RegFunction("InstallLuaFiles", InstallLuaFiles);
		L.RegFunction("InstallResFiles", InstallResFiles);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Init(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
			obj.Init();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getPackageVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
			string o = obj.getPackageVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLocalVersion(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
			string o = obj.getLocalVersion();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getLuaRoot(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
			string o = obj.getLuaRoot();
			LuaDLL.lua_pushstring(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int checkExtactResource(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
			System.Action<int,int,int> arg0 = (System.Action<int,int,int>)ToLua.CheckDelegate<System.Action<int,int,int>>(L, 2);
			System.Collections.IEnumerator o = obj.checkExtactResource(arg0);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstallUpdateZip(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				obj.InstallUpdateZip(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				obj.InstallUpdateZip(arg0, arg1, arg2);
				return 0;
			}
			else if (count == 5)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<float> arg3 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 5);
				obj.InstallUpdateZip(arg0, arg1, arg2, arg3);
				return 0;
			}
			else if (count == 6)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				string arg1 = ToLua.CheckString(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<float> arg3 = (System.Action<float>)ToLua.CheckDelegate<System.Action<float>>(L, 5);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 6);
				obj.InstallUpdateZip(arg0, arg1, arg2, arg3, arg4);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.UpdateManager.InstallUpdateZip");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstallLuaFiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Collections.IEnumerator o = obj.InstallLuaFiles(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Collections.IEnumerator o = obj.InstallLuaFiles(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<int,int,string> arg3 = (System.Action<int,int,string>)ToLua.CheckDelegate<System.Action<int,int,string>>(L, 5);
				System.Collections.IEnumerator o = obj.InstallLuaFiles(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<int,int,string> arg3 = (System.Action<int,int,string>)ToLua.CheckDelegate<System.Action<int,int,string>>(L, 5);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 6);
				System.Collections.IEnumerator o = obj.InstallLuaFiles(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.UpdateManager.InstallLuaFiles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int InstallResFiles(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Collections.IEnumerator o = obj.InstallResFiles(arg0, arg1);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Collections.IEnumerator o = obj.InstallResFiles(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 5)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<int,int,string> arg3 = (System.Action<int,int,string>)ToLua.CheckDelegate<System.Action<int,int,string>>(L, 5);
				System.Collections.IEnumerator o = obj.InstallResFiles(arg0, arg1, arg2, arg3);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 6)
			{
				LuaFramework.UpdateManager obj = (LuaFramework.UpdateManager)ToLua.CheckObject<LuaFramework.UpdateManager>(L, 1);
				string arg0 = ToLua.CheckString(L, 2);
				bool arg1 = LuaDLL.luaL_checkboolean(L, 3);
				System.Action arg2 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 4);
				System.Action<int,int,string> arg3 = (System.Action<int,int,string>)ToLua.CheckDelegate<System.Action<int,int,string>>(L, 5);
				System.Action arg4 = (System.Action)ToLua.CheckDelegate<System.Action>(L, 6);
				System.Collections.IEnumerator o = obj.InstallResFiles(arg0, arg1, arg2, arg3, arg4);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: LuaFramework.UpdateManager.InstallResFiles");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

