//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class System_Security_Cryptography_HashAlgorithmWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(System.Security.Cryptography.HashAlgorithm), typeof(System.Object));
		L.RegFunction("Create", Create);
		L.RegFunction("ComputeHash", ComputeHash);
		L.RegFunction("TransformBlock", TransformBlock);
		L.RegFunction("TransformFinalBlock", TransformFinalBlock);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("Clear", Clear);
		L.RegFunction("Initialize", Initialize);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("HashSize", get_HashSize, null);
		L.RegVar("Hash", get_Hash, null);
		L.RegVar("InputBlockSize", get_InputBlockSize, null);
		L.RegVar("OutputBlockSize", get_OutputBlockSize, null);
		L.RegVar("CanTransformMultipleBlocks", get_CanTransformMultipleBlocks, null);
		L.RegVar("CanReuseTransform", get_CanReuseTransform, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Create(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 0)
			{
				System.Security.Cryptography.HashAlgorithm o = System.Security.Cryptography.HashAlgorithm.Create();
				ToLua.PushObject(L, o);
				return 1;
			}
			else if (count == 1)
			{
				string arg0 = ToLua.CheckString(L, 1);
				System.Security.Cryptography.HashAlgorithm o = System.Security.Cryptography.HashAlgorithm.Create(arg0);
				ToLua.PushObject(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Security.Cryptography.HashAlgorithm.Create");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ComputeHash(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<System.IO.Stream>(L, 2))
			{
				System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
				System.IO.Stream arg0 = (System.IO.Stream)ToLua.ToObject(L, 2);
				byte[] o = obj.ComputeHash(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<byte[]>(L, 2))
			{
				System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				byte[] o = obj.ComputeHash(arg0);
				ToLua.Push(L, o);
				return 1;
			}
			else if (count == 4)
			{
				System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
				byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
				int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
				int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
				byte[] o = obj.ComputeHash(arg0, arg1, arg2);
				ToLua.Push(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: System.Security.Cryptography.HashAlgorithm.ComputeHash");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TransformBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 6);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte[] arg3 = ToLua.CheckByteBuffer(L, 5);
			int arg4 = (int)LuaDLL.luaL_checknumber(L, 6);
			int o = obj.TransformBlock(arg0, arg1, arg2, arg3, arg4);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int TransformFinalBlock(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 4);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
			byte[] arg0 = ToLua.CheckByteBuffer(L, 2);
			int arg1 = (int)LuaDLL.luaL_checknumber(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			byte[] o = obj.TransformFinalBlock(arg0, arg1, arg2);
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
			obj.Dispose();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Clear(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
			obj.Clear();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Initialize(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)ToLua.CheckObject<System.Security.Cryptography.HashAlgorithm>(L, 1);
			obj.Initialize();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HashSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			int ret = obj.HashSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HashSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Hash(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			byte[] ret = obj.Hash;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Hash on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_InputBlockSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			int ret = obj.InputBlockSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index InputBlockSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_OutputBlockSize(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			int ret = obj.OutputBlockSize;
			LuaDLL.lua_pushinteger(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index OutputBlockSize on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanTransformMultipleBlocks(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			bool ret = obj.CanTransformMultipleBlocks;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanTransformMultipleBlocks on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_CanReuseTransform(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			System.Security.Cryptography.HashAlgorithm obj = (System.Security.Cryptography.HashAlgorithm)o;
			bool ret = obj.CanReuseTransform;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index CanReuseTransform on a nil value");
		}
	}
}

