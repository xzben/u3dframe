//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class TableViewCellWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(TableViewCell), typeof(UnityEngine.MonoBehaviour));
		L.RegFunction("doInit", doInit);
		L.RegFunction("createLuaObject", createLuaObject);
		L.RegFunction("reset", reset);
		L.RegFunction("setInitFunc", setInitFunc);
		L.RegFunction("getData", getData);
		L.RegFunction("getCurIndex", getCurIndex);
		L.RegFunction("UpdateCell", UpdateCell);
		L.RegFunction("__eq", op_Equality);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int doInit(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			obj.doInit();
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int createLuaObject(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			LuaTable arg0 = ToLua.CheckLuaTable(L, 2);
			LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
			obj.createLuaObject(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int reset(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.reset(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int setInitFunc(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			LuaFunction arg0 = ToLua.CheckLuaFunction(L, 2);
			obj.setInitFunc(arg0);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getData(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			LuaInterface.LuaTable o = obj.getData();
			ToLua.Push(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int getCurIndex(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
			int o = obj.getCurIndex();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int UpdateCell(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 3)
			{
				TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				obj.UpdateCell(arg0, arg1);
				return 0;
			}
			else if (count == 4)
			{
				TableViewCell obj = (TableViewCell)ToLua.CheckObject<TableViewCell>(L, 1);
				int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
				LuaTable arg1 = ToLua.CheckLuaTable(L, 3);
				bool arg2 = LuaDLL.luaL_checkboolean(L, 4);
				obj.UpdateCell(arg0, arg1, arg2);
				return 0;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: TableViewCell.UpdateCell");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int op_Equality(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			UnityEngine.Object arg0 = (UnityEngine.Object)ToLua.ToObject(L, 1);
			UnityEngine.Object arg1 = (UnityEngine.Object)ToLua.ToObject(L, 2);
			bool o = arg0 == arg1;
			LuaDLL.lua_pushboolean(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

