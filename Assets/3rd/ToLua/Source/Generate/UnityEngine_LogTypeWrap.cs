//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class UnityEngine_LogTypeWrap
{
	public static void Register(LuaState L)
	{
		L.BeginEnum(typeof(UnityEngine.LogType));
		L.RegVar("Error", get_Error, null);
		L.RegVar("Assert", get_Assert, null);
		L.RegVar("Warning", get_Warning, null);
		L.RegVar("Log", get_Log, null);
		L.RegVar("Exception", get_Exception, null);
		L.RegFunction("IntToEnum", IntToEnum);
		L.EndEnum();
		TypeTraits<UnityEngine.LogType>.Check = CheckType;
		StackTraits<UnityEngine.LogType>.Push = Push;
	}

	static void Push(IntPtr L, UnityEngine.LogType arg)
	{
		ToLua.Push(L, arg);
	}

	static bool CheckType(IntPtr L, int pos)
	{
		return TypeChecker.CheckEnumType(typeof(UnityEngine.LogType), L, pos);
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Error(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.LogType.Error);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Assert(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.LogType.Assert);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Warning(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.LogType.Warning);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Log(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.LogType.Log);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Exception(IntPtr L)
	{
		ToLua.Push(L, UnityEngine.LogType.Exception);
		return 1;
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int IntToEnum(IntPtr L)
	{
		int arg0 = (int)LuaDLL.lua_tonumber(L, 1);
		UnityEngine.LogType o = (UnityEngine.LogType)arg0;
		ToLua.Push(L, o);
		return 1;
	}
}

